import 'package:scarabei/api/files/file.dart';
import 'package:scarabei/api/files/files_list.dart';
import 'package:scarabei/api/log/logger.dart';
import 'package:scarabei/api/path/relative_path.dart';
import 'package:scarabei/api/utils/utils.dart';

class ExportFilesGenerator {
  static final String PUBSEC = "pubspec.yaml";
  static final String N = "\n";
  static final String R = "\r";

  static List<File> generate(File root, {bool dryRun = false}) {
    FileFilter pubsecFilter = (file) => file.getName() == PUBSEC;

    FilesList pubsecFiles = root.listAllChildren(fileFilter: pubsecFilter);
    List<File> outputExportFiles = [];
    for (File pubsec in pubsecFiles.toList()) {
      File exportFile = processProject(pubsec, dryRun: dryRun);
      outputExportFiles.add(exportFile);
    }
    return outputExportFiles;
  }

  static File processProject(File pubsec, {bool dryRun = false}) {
    File project_root = pubsec.parent();
    String pubsecData = pubsec.readString();
    final String name = pubsecData.split(N)[0].replaceAll("name: ", "").replaceAll(N, "").replaceAll(R, "");
    L.d("project", project_root);
    L.d("   name", name);

    final File lib = project_root.child("lib");
    final File exportFile = lib.child(name + ".dart");

    FileFilter dartFilter = (file) => file.extensionIs("dart");

    final FilesList dartFiles = lib.listAllChildren(fileFilter: dartFilter);
    final List<String> exportFileContent = [];
    exportFileContent.add("/*");
    exportFileContent.add(N);
    exportFileContent.add("DO NOT EDIT!");
    exportFileContent.add(N);
    exportFileContent.add(
        "  this file was generated by export_files_generator (https://pub.dartlang.org/packages/export_files_generator)");
    exportFileContent.add(N);
    exportFileContent.add("*/");
    exportFileContent.add(N);
    final RelativePath prefix = project_root.getAbsoluteFilePath().getRelativePath();
    for (final File dart in dartFiles.toList()) {
      final RelativePath dart_prefix = dart.getAbsoluteFilePath().getRelativePath();
      List<String> postfix = dart_prefix.steps();
      postfix = postfix.sublist(prefix.size() + 1, postfix.length); //lib
      final RelativePath split = Utils.newRelativePath(path_steps: postfix);
      final String fileName = split.getLastStep();
      if (fileName == (exportFile.getName())) {
        continue;
      }
      exportFileContent.add("export 'package:" + name + RelativePath.SEPARATOR + split.toString() + "';");
      exportFileContent.add(N);
    }
    L.d("writing", exportFile);
    String data = exportFileContent.join("");
    if (dryRun) {
      L.d(data);
    } else {
      exportFile.writeString(data);
    }
    L.d("");
    return exportFile;
  }
}
